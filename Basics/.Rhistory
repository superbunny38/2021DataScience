x<-11:30
x
z1+x1#연산산
asin(-1)
#벡터 생성하기
d <- c(1,2.5,3.2)#double
d
t1 <- c(1,2,3)
t1
class(t1)
tyle(t1)
type(t1)
부여하기
fruit <- c(1,2,3,4)
names(fruit)<-c("apple","orange","pineapple")
fruit
length(fruit)
터를 사용하여 새로운 벡터 생성하기
a<-c(1,2,3)
b<-c(5,6)
x<-c(a,4,b)
x
#인덱스 범위가 넘는 자리에 값을 할당하면:
#NA: Not Available
a[7]<-4#1 2 3 NA NA NA 4
a
length(a)
x<-0:6
class(x)
x<- as.numeric(x)
x
x<-"0":"6"
x
class(x)
x<- as.numeric(x)
x
class(x)
x<-"0":"6"
x
class(x)
as.character(x)
z
class(x)
as.character(x)
x<- as.character(x)
class(x)
x<-as.logical(x)
x
x<-c("a","b","c")
x
as.numeric(x)#NA, NA, NA
as.logical(x)#NA, NA, NA
as.complex(x)#NA, NA, NA
#기존 벡터에 객체 삽입하기
append(a,88,after=2)#두번째 값 뒤에 88을 넣음
a
m1 <- matrix(1, nrow = 2, ncol = 3)
m1
m+m1
#매트릭스 생성 방법1
m <- matrix(nrow = 2, ncol = 3)#NA 값으로 채워짐
m
m1 <- matrix(1, nrow = 2, ncol = 3)
m1
m+m1
z <- matrix(1:20,4,5)
z
z3 <- matrix(c(1,2,3,4,5,6),nrow =2,ncol=3,byrow = T)
#byrow=T: row-wise형태
#row 먼저 채움
z3
z3 <- matrix(c(1,2,3,4,5,6),nrow =2,ncol=3,byrow = FALSE)
#byrow=FALSE: column-wise형태
z3
y<-matrix(c(1,2,3,4),nrow=2,byrow=T)
y
y<-matrix(c(1,2,3,4),nrow=2)
y
#############리스트 생성하기(약간 class랑 비슷한 듯)
#리스트: 다른 객체들로 구성된 특별한 형태의 벡터
x <- list(1,"a",TRUE,1+4i)
x
x[1]
x[2]
x[2][1]
x[2][2]
x[2]
x[2,1]
x[2]
Hong <- list(cor.name = "홍길동",
eng.name = "Gil-dong",
married = T,
no.child = 2,
child.ages = c(13,10)
)
Hong
str(Hing)
str(Hong)
#$: 접근법
Hong$cor.name#이렇게도 빼올 수 있음
#$: 접근법
Hong$child.ages
Hong$child.ages[2]
Hong[1]
Hong[length(Hong)]
Hong[c(1,2)]
Hong[[1]]
Hong[c(1,2)]
Hong[[c(1)]]
Hong[[c(1,2)]]
Hong[6]
Hong[5]
Hong[5][1]
Hong[5][2]
Hong[[5]][1]
x <- list(a=1:10,
beta = exp(-3:3),
logic = c(TRUE, FALSE, FALSE, TRUE))
x<-list(a=1:10,
beta = exp(-3:3),
logic = c(T, F, F, T))
x
x$aa
x$a
x$beta
length(x$beta)
x$logic
#lapply: apply a function over a function to a list or vector
x
lapply(x,mean)
lapply(x,quantile, probs = (1:3)/4)
lapply(x,quantile, probs = (1:4)/5)
lapply(x,quantile, probs = (1:3)/4)
lapply(x,quantile, probs = (1:4)/5)
lapply(x,quantile, probs = (1:3)/4)
lapply(x,quantile, probs = (1:4)/5)
lapply(x,quantile, probs = (1:4)/4)#4등분
lapply(x,quantile, probs = (1:3)/4)#4등분
lapply(x$a,quantile, probs = (1:3)/4)#4등분
lapply(x,quantile, probs = (1:3)/4)#4등분
#lapply: 각 성분에 대해 같은 함수를 반복적으로 적용한 값을 리턴하기
#lapply: apply a function over a function to a list or vector
x
lapply(x,quantile, probs = (1:3)/4)#4등분
#4등분
lapply(x,quantile, probs = (1:3)/4)#4등분
lapply(x,quantile, probs = (1:4)/5)#5등분
x$n <- c(0,10)
length(x$beta)#7
x
#1:3/4 == c(1,2,3)/4 -> 0.25, 0.5, 0.75
lapply(x,quantile, probs = (1:3)/4)#4등분
lapply(x,quantile, probs = (1:4)/5)#5등분
'''
dhf
'''
blood.type <- factor(c("A","A","AB","O","O"), levels = c("A","B","AB","O"))
table(bood.type)
table(blood.type)
hist(blood.type)
x<- factor(c("yes","yes","no","yes","no"))
x
#the order can be set using "levels"
x<- factor(c("yes","yes","no","yes","no"), levels = c("yes","no"))
x
blood.type <- factor(c("A","A","AB","O","O"), levels = c("A","B","AB","O"))
table(blood.type)#A: 2개, B: 0개, AB: 1개, O: 2개
blood.type1 <- factor(c("A","A","AB","O","O"))
table(blood.type1)
x<- data.frame(id = 1:4, name = c("Kim","Lee","Park","Choi"))
x
x <- c(100,75,80)
x
x<- data.frame(id = 1:4, name = c("Kim","Lee","Park","Choi"))
x
x <- c(100,75,80)
y <- c("A302043","A302044","A302045")
z <- data.frame(score=X, ID = y)
z <- data.frame(score=x, ID = y)
x <- c(100,75,80)
y <- c("A302043","A302044","A302045")
z <- data.frame(score=x, ID = y)
z
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
dat.1
str(dat.1)
dat.2 <- data.frame(x=1:3, y = c('a','b','c'), stringsAsFactors = F)
dat.2
dat.3 <- data.frame(x=1:3, y = c('a','b','c'), stringsAsFactors = T)
dat.3
dat.2 == dat.3
str(dat.2)
str(dat.3)
dat.4 <- data.frame(x=1:3, y = c('a','b','c'))
dat.4
str(dat.4)
<- data.frame(x=1:3, y = c('a','b','c'))
dat.4
str(dat.4)
dat.4 <- data.frame(x=1:3, y = c('a','b','c'))
dat.4
str(dat.4)
a <- data.frame(x = c(5,10,15),y = c("a","b","c"))
b <- data.frame(z = c(10,20,30))
a
b
cbind(a,b,)
cbind(a,b)
#여러 개의 데이터프레임을 열방향으로 붙여 새로운 데이터프레임 생성하기
a1 <- data.frame(x=c(20,25,30), y = c("d","e","f"))
a
a1
rbind(a,a1)
#만약 column이름이 다르면?
a2 <- data.frame(y = c("1","2","4"), z= c("a",5,"2"))
a1
a2
rbind(a1,a2)
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
str(dat.1)
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
str(dat.1)
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
str(dat.1)
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
str(dat.1)
dat.1 <- data.frame(x=1:3, y = c('a','b','c'))
str(dat.1)
d <- data.frame(x = 1:2, y = c("ab","bc"))
d
str(d)
View(m1)
